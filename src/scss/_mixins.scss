//-------------------------------------
// convert px to rem
// padding: rem(10px) rem(20px);
//-------------------------------------
@function rem($size) {
	$remSize: $size / 16px;
	@return #{$remSize}rem;
}

//-------------------------------------
//breadpoints
//.page-wrap {
//	 width: 75%;
//
//	 @include bp(#bpSmall) { width: 60%; }
//	 @include bp(420px) { width: 60%; }
//}
//-------------------------------------
@mixin bp($point, $direction : 'max') {
	@media screen and (#{$direction}-width: $point) {
		@content;
	}
}

//-------------------------------------
//breakpoint height
//   @include bph(200) { ... }
//-------------------------------------
@mixin bph($point, $direction : 'max') {
	@media screen and (#{$direction}-height: $point) {
		@content;
	}
}

//-------------------------------------
//breakpoint custom
//    @include bpc("(max-width:200px) and (min-height:200)") {...}
//-------------------------------------
@mixin bpc($code, $direction : 'max') {
	@media screen and #{$code}  {
		@content;
	}
}

//-------------------------------------
//clearfix
//-------------------------------------
@mixin clearfix {
	&:before,
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}

//-------------------------------------
// ir - ukrywanie tekstu
//-------------------------------------
@mixin ir() {
	font: 0/0 a !important;
	text-shadow: none !important;
	color: transparent !important;
	border: 0 !important;
	background-color: transparent !important;
	display: block;
	background-repeat: no-repeat;

	br { display: none; }
}

//-------------------------------------
// responsive images in bg
// parent must have width: $image-width
//-------------------------------------
@mixin responsive-bg-image($image-width, $image-height) {
	background-size: 100%;
	background-repeat: no-repeat;
	max-width: $image-width;
	height: 0;
	padding-bottom: percentage($image-height / $image-width);
	display: block;
}

//-------------------------------------
// responsive image as :before of element
// this version not require parent element
//-------------------------------------
@mixin responsive-bg-image-before($image-width, $image-height, $imageUrl) {
	max-width: $image-width;

	&:before {
		background: url($imageUrl);
		background-size: 100%;
		background-repeat: no-repeat;
		padding-bottom: percentage($image-height / $image-width);
		width: 100%;
		content: '';
		display: block;
	}
}

//-------------------------------------
// tworzy maly rozek jak w tooltipach.
// size - wielkosc strzalki
// color - kolor strzalki
// side - z której strony strzałka (top, left, right, bottom)
// position - 99px - pozycja strzalki na danej stronie
// $rear - czy liczyc pozycje od lewej czy od prawej (od gory czy od dolu)
// tooltip-arrow-fill(10px, #fff, 'top', 99px, 1);
//-------------------------------------
@mixin tooltip-arrow-fill($size : 10px, $color : #FFF, $side : top, $position : 50%, $rear : 0) {
	position: relative;

	&:before {
		content: '';
		width: 0;
		height: 0;
		border: $size solid transparent;
		position: absolute;

		@if ($side==top) {
			@if ($rear==0) {
				left: $position;
				margin-left: -$size;
			} @else {
				right: $position;
				margin-right: -$size;
			}
			top: -$size*2;
			border-bottom-color: $color;
		} @else if ($side==bottom) {
			@if ($rear==0) {
				left: $position;
				margin-left: -$size;
			} @else {
				right: $position;
				margin-right: -$size;
			}
			bottom: -$size*2;
			border-top-color: $color;
		} @else if ($side==left) {
			@if ($rear==0) {
				top: $position;
				margin-top: -$size;
			} @else {
				bottom: $position;
				margin-bottom: -$size;
			}
			left: -$size*2;
			border-right-color: $color;
		} @else if ($side==right) {
			@if ($rear==0) {
				top: $position;
				margin-top: -$size;
			} @else {
				bottom: $position;
				margin-bottom: -$size;
			}
			right: -$size*2;
			border-left-color: $color;
		}
	}
}

//-------------------------------------
// tworzy rozek strzalki ale niewypelnionej
// $direction = kierunek strzalki left, right, top, bottom
//-------------------------------------
@mixin tooltip-arrow($direction){
	border: solid black;
	border-width: 0 3px 3px 0;
	display: inline-block;
	padding: 3px;

	@if ($direction == right) {
		transform: rotate(-45deg);
	} @else if ($direction == left) {
		transform: rotate(135deg);
	} @else if ($direction == up) {
		transform: rotate(-135deg);
	} @else if ($direction == down) {
		transform: rotate(45deg);
	}
}

//-------------------------------------
// animation with delay
// http://waitanimate.wstone.io/#!/
//
// includujemy nie w elemencie, ale poza nim: 
// .elementName {}
//
// @include waitAnimate(
//   (
//     animationName: elementName,
//     keyframes: (
//       0: (
//         transform: scale(1),
//         background-color: blue
//       ),
//       50: (
//         transform: scale(2),
//         background-color: green
//       ),
//       100: (
//         transform: scale(3),
//         background-color: red
//       )
//     ),
//     duration: 2,
//     waitTime: 1,
//     timingFunction: ease,
//     iterationCount: infinite
//   )
// );
//-------------------------------------
@mixin waitAnimate($options: ()) {
	$options: map-merge((
		animationName: waitAnimate,
		duration: 1,
		waitTime: 0,
		timingFunction: linear,
		iterationCount: infinite
	), $options);

	$name: map-get($options, animationName);
	$kf: map-get($options, keyframes);
	$kfLength: length($kf);
	$duration: map-get($options, duration);
	$waitTime: map-get($options, waitTime);
	$timingFunction: map-get($options, timingFunction);
	$iterationCount: map-get($options, iterationCount);
	$counter: 1; // index of 'each'

	@keyframes #{$name} {
		@each $frame, $prop in $kf {
			#{$frame * $duration / ($duration + $waitTime)}% {
				@each $k, $v in $prop {
					#{$k}: #{$v}
				}
			}
			// if last in loop and waitTime is not 0, add the last frame as 100% (this is what creates the pause)
			@if $counter == $kfLength and $waitTime > 0 {
				100% {
					@each $k, $v in $prop {
						#{$k}: #{$v}
					}
				}
			}
			$counter: $counter+1;
		}
	}

	.#{$name} {
		animation: #{$name} #{$duration + $waitTime}s #{$timingFunction} #{$iterationCount};
	}

}